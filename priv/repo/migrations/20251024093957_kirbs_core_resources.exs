defmodule Kirbs.Repo.Migrations.KirbsCoreResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:items, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :brand, :text
      add :size, :text
      add :colors, {:array, :text}
      add :materials, {:array, :text}
      add :description, :text
      add :quality, :text
      add :suggested_category, :text
      add :yaga_brand_id, :bigint
      add :yaga_category_id, :bigint
      add :yaga_colors_id_map, {:array, :bigint}
      add :yaga_materials_id_map, {:array, :bigint}
      add :yaga_condition_id, :bigint
      add :ai_suggested_price, :decimal
      add :ai_price_explanation, :text
      add :listed_price, :decimal
      add :sold_price, :decimal
      add :status, :text, null: false, default: "pending"
      add :yaga_id, :bigint
      add :yaga_slug, :text
      add :upload_error, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bag_id, :uuid, null: false
    end

    create table(:images, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :path, :text, null: false
      add :order, :bigint, null: false, default: 0

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :bag_id, :uuid
      add :item_id, :uuid
    end

    create table(:clients, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :phone, :text, null: false
      add :email, :text
      add :iban, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:clients, [:phone], name: "clients_unique_phone_index")

    create table(:bags, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:items) do
      modify :bag_id,
             references(:bags,
               column: :id,
               name: "items_bag_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:images) do
      modify :bag_id,
             references(:bags,
               column: :id,
               name: "images_bag_id_fkey",
               type: :uuid,
               prefix: "public"
             )

      modify :item_id,
             references(:items,
               column: :id,
               name: "images_item_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:bags) do
      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :client_id,
          references(:clients,
            column: :id,
            name: "bags_client_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end
  end

  def down do
    drop constraint(:bags, "bags_client_id_fkey")

    alter table(:bags) do
      remove :client_id
      remove :updated_at
      remove :created_at
    end

    drop constraint(:images, "images_bag_id_fkey")

    drop constraint(:images, "images_item_id_fkey")

    alter table(:images) do
      modify :item_id, :uuid
      modify :bag_id, :uuid
    end

    drop constraint(:items, "items_bag_id_fkey")

    alter table(:items) do
      modify :bag_id, :uuid
    end

    drop table(:bags)

    drop_if_exists unique_index(:clients, [:phone], name: "clients_unique_phone_index")

    drop table(:clients)

    drop table(:images)

    drop table(:items)
  end
end
